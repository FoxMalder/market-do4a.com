/*!
 * Front for marketdo4a.com 1.4.0-beta.1 
 * (c) 2020 Roman Meshcheryakov
 */
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{180:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(281);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);\n\n\n\nfunction startHeroSlideAnimation(slide, func) {\n  var leftLine = slide.querySelector('.hero-slider__left-line');\n  var rightLine = slide.querySelector('.hero-slider__right-line');\n  var image = slide.querySelector('.hero-slider__img');\n  var text = slide.querySelector('.hero-slider__inner');\n\n  if (leftLine && rightLine) {\n    var transformStyle = window.getComputedStyle(leftLine).transform;\n    leftLine.style.transform = transformStyle;\n    rightLine.style.transform = transformStyle;\n  }\n\n  var animation = animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].timeline({\n    autoplay: false,\n    complete: func\n  });\n  animation.add({\n    targets: slide,\n    translateX: {\n      // value: [-1579, 0],\n      value: ['-100%', 0],\n      easing: 'spring(1, 100, 20, 0)'\n    },\n    opacity: {\n      value: [0, 1],\n      easing: 'cubicBezier(.25, .1, .25, 1)',\n      duration: 400\n    }\n  }).add({\n    // Заголовки\n    targets: text,\n    translateX: [-160, 0],\n    scale: [1.3, 1],\n    easing: 'spring(1, 100, 20, 0)'\n  }, 200).add({\n    // Правая полоска\n    targets: rightLine,\n    translateX: {\n      value: [-670, 0],\n      easing: 'spring(1, 100, 20, 0)'\n    },\n    opacity: {\n      value: [0, 1],\n      easing: 'cubicBezier(.25, .1, .25, 1)',\n      duration: 300\n    }\n  }, 300).add({\n    // Левая полоска\n    targets: leftLine,\n    translateX: {\n      value: [-670, 0],\n      easing: 'spring(1, 100, 20, 0)'\n    },\n    opacity: {\n      value: [0, 1],\n      easing: 'cubicBezier(.25, .1, .25, 1)',\n      duration: 300\n    }\n  }, 400).add({\n    targets: image,\n    translateX: {\n      value: [-110, 0],\n      easing: 'spring(1, 100, 20, 0)'\n    },\n    opacity: {\n      value: [0, 1],\n      easing: 'cubicBezier(.25, .1, .25, 1)',\n      duration: 300\n    }\n  }, 800); // animation\n  //   .add({\n  //     targets: image,\n  //     translateX: {\n  //       value: 112,\n  //       easing: 'linear',\n  //     },\n  //     duration: 11420,\n  //   });\n\n  return animation;\n}\n\nvar HeroSliderEffect = {\n  init: function init() {\n    // const animations = [];\n    var swiper = this;\n    var slides = swiper.slides;\n    swiper.heroSliderEffect.animationsArray = [].map.call(slides, function (el) {\n      return {\n        start: startHeroSlideAnimation(el, function () {\n          return swiper.emit('transitionEnd');\n        }),\n        second: Object(animejs_lib_anime_es__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({\n          autoplay: false,\n          duration: swiper.params.heroSliderEffect.duration,\n          easing: 'easeInOutQuad',\n          targets: el.querySelector('.hero-slider__img'),\n          translateX: [0, '5%'],\n          complete: function complete() {\n            // console.log('sdfsdf');\n            swiper.slideNext();\n          }\n        })\n      };\n    });\n    swiper.heroSliderEffect.animationsArray[0].start.play();\n  },\n  setTranslate: function setTranslate(translate) {\n    // console.log(`setTranslate, active:${this.activeIndex}, prev: ${this.previousIndex}, translate: ${translate}`);\n    var swiper = this;\n    var slides = swiper.slides; //\n    // // if (swiper.animations.length === 0) {\n    // //\n    // // }\n\n    for (var i = 0; i < slides.length; i += 1) {\n      var $slideEl = swiper.slides.eq(i);\n      var offset = $slideEl[0].swiperSlideOffset;\n      var tx = -offset;\n      if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n      var ty = 0;\n\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      } // const slideOpacity = swiper.params.fadeEffect.crossFade\n      //   ? Math.max(1 - Math.abs($slideEl[0].progress), 0)\n      //   : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n\n\n      var slideOpacity = 1 + Math.min(Math.max($slideEl[0].progress, -1), 0); // console.log($slideEl[0].progress);\n      //\n      // $slideEl\n      //   .css({\n      //     opacity: slideOpacity,\n      //   })\n      //   .transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n    }\n  },\n  setTransition: function setTransition(duration) {// console.log(`setTransition, active:${this.activeIndex}, prev: ${this.previousIndex}`);\n    //\n    // const swiper = this;\n    // const { slides, $wrapperEl } = swiper;\n    //\n    // for (let i = 0; i < slides.length; i += 1) {\n    //   // this.animateSlide[i].reset();\n    //   swiper.heroSliderEffect.animationsArray[i].start.seek(0);\n    //\n    //   if (i === swiper.activeIndex) {\n    //     swiper.heroSliderEffect.animationsArray[i].start.play();\n    //     // this.animateSlide[i].seek(this.animateSlide[i].duration * slideOpacity);\n    //   } else if (i === swiper.previousIndex) {\n    //     swiper.heroSliderEffect.animationsArray[i].start.seek(swiper.heroSliderEffect.animationsArray[i].start.duration);\n    //   }\n    // }\n    // slides.transition(duration);\n    // if (swiper.params.virtualTranslate && duration !== 0) {\n    //   let eventTriggered = false;\n    //   slides.transitionEnd(() => {\n    //     if (eventTriggered) return;\n    //     if (!swiper || swiper.destroyed) return;\n    //     eventTriggered = true;\n    //     swiper.animating = false;\n    //     const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n    //     for (let i = 0; i < triggerEvents.length; i += 1) {\n    //       $wrapperEl.trigger(triggerEvents[i]);\n    //     }\n    //   });\n    // }\n  },\n  setTransitionStart: function setTransitionStart() {\n    // console.log(`transitionStart, active:${this.activeIndex}, prev: ${this.previousIndex}`);\n    var swiper = this;\n    var slides = swiper.slides;\n    var bullets = swiper.pagination.bullets;\n\n    for (var i = 0; i < slides.length; i += 1) {\n      // this.animateSlide[i].reset();\n      var $line = bullets.eq(i).find('.hero-slider-control__loader-line');\n      $line.transition(300);\n      $line.removeClass('active');\n      var slideAnim = swiper.heroSliderEffect.animationsArray[i]; // console.log(slideAnim);\n\n      slideAnim.start.seek(0);\n      slideAnim.second.pause();\n\n      if (i === swiper.activeIndex) {\n        slideAnim.start.play(); // this.animateSlide[i].seek(this.animateSlide[i].duration * slideOpacity);\n      } else if (i === swiper.previousIndex) {\n        slideAnim.start.seek(slideAnim.start.duration);\n      }\n    }\n  },\n  setTransitionEnd: function setTransitionEnd() {\n    // console.log(`transitionEnd, active:${this.activeIndex}, prev: ${this.previousIndex}`);\n    var swiper = this;\n    var slides = swiper.slides;\n    var bullets = swiper.pagination.bullets;\n\n    for (var i = 0; i < slides.length; i += 1) {\n      // this.animateSlide[i].reset();\n      // swiper.heroSliderEffect.animationsArray[i].end.seek(0);\n      // anime();\n      //\n      var $line = bullets.eq(i).find('.hero-slider-control__loader-line');\n      $line.transition(swiper.params.heroSliderEffect.duration);\n      var slideAnim = swiper.heroSliderEffect.animationsArray[i];\n      slideAnim.second.pause(); // console.log(slideAnim.second.completed);\n\n      slideAnim.second.seek(0);\n\n      if (i === swiper.activeIndex) {\n        // slideAnim.second.seek(0);\n        slideAnim.second.play();\n        $line.addClass('active'); // this.animateSlide[i].seek(this.animateSlide[i].duration * slideOpacity);\n      } else if (i === swiper.previousIndex) {// slideAnim.second.seek(\n        //   slideAnim.second.duration,\n        // );\n      } else {// slideAnim.second.seek(0);\n        }\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'effect-hero-slider',\n  params: {\n    heroSliderEffect: {\n      duration: 10000,\n      animationsArray: [] // crossFade: false,\n\n    }\n  },\n  create: function create() {\n    var swiper = this;\n    _utils_utils__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].extend(swiper, {\n      heroSliderEffect: {\n        init: HeroSliderEffect.init.bind(swiper),\n        setTranslate: HeroSliderEffect.setTranslate.bind(swiper),\n        setTransition: HeroSliderEffect.setTransition.bind(swiper),\n        setTransitionStart: HeroSliderEffect.setTransitionStart.bind(swiper),\n        setTransitionEnd: HeroSliderEffect.setTransitionEnd.bind(swiper)\n      }\n    });\n  },\n  on: {\n    beforeInit: function beforeInit() {\n      var swiper = this;\n      if (swiper.params.effect !== 'hero-slider') return;\n      swiper.heroSliderEffect.animationsArray = [];\n      swiper.classNames.push(\"\".concat(swiper.params.containerModifierClass, \"fade\"));\n      var overwriteParams = {\n        slidesPerView: 1,\n        slidesPerColumn: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        spaceBetween: 0,\n        virtualTranslate: true\n      }; // Utils.extend(swiper.animations, animations);\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].extend(swiper.params, overwriteParams);\n      _utils_utils__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].extend(swiper.originalParams, overwriteParams);\n    },\n    // init() {\n    //   const swiper = this;\n    //   if (swiper.params.effect !== 'hero-slider') return;\n    //   console.log(this.slides);\n    // },\n    // setTranslate(translate) {\n    //   const swiper = this;\n    //   if (swiper.params.effect !== 'hero-slider') return;\n    //   swiper.heroSliderEffect.setTranslate(translate);\n    // },\n    // setTransition(duration) {\n    //   const swiper = this;\n    //   if (swiper.params.effect !== 'hero-slider') return;\n    //   swiper.heroSliderEffect.setTransition(duration);\n    // },\n    init: function init() {\n      var swiper = this;\n      if (swiper.params.effect !== 'hero-slider') return;\n      swiper.heroSliderEffect.init();\n    },\n    transitionStart: function transitionStart() {\n      var swiper = this;\n      if (swiper.params.effect !== 'hero-slider') return;\n      swiper.heroSliderEffect.setTransitionStart();\n    },\n    transitionEnd: function transitionEnd() {\n      var swiper = this;\n      if (swiper.params.effect !== 'hero-slider') return;\n      swiper.heroSliderEffect.setTransitionEnd();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///180\n")}}]);